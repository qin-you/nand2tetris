
# 实现顺序
一位寄存器  --  16位寄存器  --  计数器 -- RAM8（8-Reg RAM） --  RAM64  -- RAM512  -- RAM4K  -- RAM16K


## Hints
- 注意hdl是在搭电路，我们只是在做一些接线操作，hdl是静态的描述语言，需要从这个角度去理解
一位寄存器：
```hdl
Mux(a=o2, b=in, sel=load, out=o1);
DFF(in=o1, out=o2, out=out);
```
这个从软件角度看是奇怪的：o2是未来的变量在当前执行，但结合上述角度，这些只不过都是在“描述”电线的连接而已。符合HDL本身定位：Description。

一位寄存器电路示意图
```

       load
        |
     |\ v        
     |  \       +---------+
in-->|Mux|------|   DFF   |------>out
     |  /       +---------+   |
  +--|/                       |
  |                           |
  +---------------------------+

```

对外黑箱：
```

         +-------------+
  in --->|             |
         |  1-bit Reg  |-----> out
load --->|             |
         +-------------+
```

寄存器和ram只需要支持两个服务：读 ，写。


- DFF门 （数据触发器）已经实现可以直接用


- 8寄存器ram实现的核心和线索是
```hdl
Mux8Way16(a=o0, b=o1, c=o2, d=o3, e=o4, f=o5, g=o6, h=o7, sel=address, out=out);
```
